
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix : <http://semex.sigmanoise.com/r3/life-sim#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix string: <http://www.w3.org/2000/10/swap/string#>.
@prefix diff: <http://www.w3.org/2004/delta#>.


:跳过
    a   :动作;
    :前提 true;
    :参数 ();
    :描述 "什么都不做";
.

:抛硬币
    a   :动作;
    :前提   true;
    :参数   ();
    :描述   "抛一枚硬币";
    :后果   {
            { (100) e:random ?x  } diff:insertion { ( {?x math:greaterThan 49} {:看到  :投掷结果 :正面} {:看到  :投掷结果 :反面} ) log:ifThenElseIn ?scope }
    };
.

# log:ifThenElseIn
:投掷结果 a :临时变量.

:加点
    a   :动作;
    :参数 (:加点属性 :加点数值); # 可以将具体动作看作类，则它的参数就是其slot，实例就是具体的动作实例。
    :前提   {:self :可分配点数 ?y. 
            ?y math:greaterThan 0 };
    # :后果 {
    #     {:当前动作 :加点属性 ?p; :加点数值 ?v. :self ?p ?v2. (?v ?v2) math:sum ?v3 } 
    #         diff:replacement {:self ?p ?v3};
    #         #diff:deletion {:self ?p ?v2.}.
    # }
.

{
    :当前动作 a :加点.
    :当前动作 :加点属性 ?prop.
    :当前动作 :加点数值 ?v. 
    :self ?prop ?v2.
    (?v2 ?v ) math:sum ?v3.
} => {
    :当前动作 :后果 
    {
        {:self ?prop ?v2 } diff:replacement {:self ?prop ?v3}
    }

    # 另一种设计： 计算动作实例的未完全ground的后果。
    # TODO 但是似乎math:sum在diff:repalcement中会匹配失败？ 
    # {
    #     {:self ?prop ?v2. (?v2 ?v) math:sum ?v3 } diff:replacement {:self ?prop ?v3}
    # }
}.


:选择天赋
    a   :动作;
    :参数   (:所选天赋);
    :前提   {:self  :可选天赋数 ?y. ?y math:greaterThan 0};
    :后果   {{:当前动作 :所选天赋 ?v  } 
            diff:insertion {:self :具有天赋 ?v}};
.

{ 
    ?SCOPE e:findall (
        ?x
        {?x a :天赋}
        ?y
    ) .
    (?y 3) :random-sample ?answer.
} => {:所选天赋 :取值范围 ?answer}.



# 动作的后果是一个diff图
# 理论上，应该是动作实例而不是动作类对应一个后果的diff图。因此应该使用规则，说明如何从动作类型和参数计算具体的动作实例的diff. 
# 下面计算的不是动作实例的后果，而是当前状态下的动作实例的后果。完全ground了。

{
    ?x a :动作;
        :后果替换 {?s ?p ?o}
} => {
        ?x :后果 
        {
            {?s ?prop ?v } diff:replacement {?s ?prop ?o}
        }
}.



# 对于无参数的动作类，动作实例的后果可以从类那里继承。
{
    :当前动作 a ?action.
    ?action :后果 ?y.
} => { :当前动作 :后果 ?y}.




:加点属性 :取值范围 (:智力 :颜值 :体质 :家境). # 取值范围相当于 k:range

{:self :可分配点数 ?y. ("当前可分配点数为" ?y ) string:concatenation ?message} => {:加点数值 :提示信息 ?message.}.

:加点数值 :取值范围 xsd:integer. # 取值范围，相当于 k:constr-range-belongs

#:加点点数 :取值约束条件 (?value {:self :可分配点数 ?y. ?value math:lessThan ?y}) # :取值约束条件 可以看作该动作类的 slot上的constraint
{
    :当前动作 a :加点. 
    :当前动作 :加点数值 ?value. 
    :self :可分配点数 ?y. 
    ?value math:greaterThan ?y. 
    :self :可分配点数 ?z.
    ("加点不能超出可分配点数。" "当前的可分配点数为" ?z ) string:concatenation ?reason.
} => {:执行动作 a :Failed; :reason ?reason}.

:吃 a :动作 ;
    :描述 "你吃下了<<object>>" ;
    :参数 (:吃的对象);
    :前提 {
        :self :拥有物品 ?object .
        ?object a :食物.
    } ;
    :后果 {
        {:当前动作 :吃的对象 ?v  } 
            diff:deletion {:self :拥有物品 ?v.}.
    }
.

{ ?SCOPE e:findall (
        ?value
        {:self :拥有物品 ?value. ?value a :食物}
        ?values
    ) 
} => {:吃的对象 :取值范围 ?values}. # 自动推出列表




:赠送
    a   :动作;
    :参数   (:赠送物 :赠送对象); #所有的参数都是临时变量。
    :前提   {:self  :拥有物品 ?x};
    :后果
        [
            :移除   {:self :拥有物品  :赠送物};
            :新增   {:赠送对象  :拥有物品  :赠送物};

        ]

:服用仙丹
    a   :动作;
    :描述 "你服下了仙丹";
    :前提 {:self :拥有物品 :仙丹 };
    :后果 
    {
        {:self :拥有状态 :患病 }
            diff:deletion {:self :拥有状态 :患病 }.
    },
    {
        {?scope e:fail {:self :拥有状态 :患病}. :self :体质 ?x. (?x 2) math:sum ?y }
            diff:replacement {:self :体质 ?y}.
    }
.

:揍ta
    a   :动作;
    :参数 (:揍的对象);
    :描述 "你狠狠地揍了ta一拳";
    :前提 {:self!:体质 math:largerThan 5};
    :后果 {
            { :当前动作 :揍的对象 ?obj. ?obj :体质 ?x. (?x 2) math:difference ?y } 
                diff:replacement {?obj :体质 ?y };
                #diff:deletion {?obj :体质 ?x }
        } 
.

{?scope e:findall (?x {:self :认识的人 ?x} ?y)} => {:揍的对象 :取值范围 ?y}.

{?x a :动作. ?x :参数 ?l. ?y list:in ?l. } => {?y a :动作参数}.






@prefix : <http://semex.sigmanoise.com/r3/life-sim#> .



:食物 :super-class :消耗品.
:消耗品 :super-class :物品.
:主动物品 :super-class :物品.
:被动物品 :super-class :物品. 

:aptx-4869
    a :食物;
    :描述 "有一半可能回到8岁，有一半可能死掉";
    :服用效果 (
        [
            :后果替换  {:self :年龄 8};
            :概率   :有时;
        ]
        [
            :后果替换   {:self :死亡 true};
            :概率   :有时;
        ]
    )
.


{:当前动作 a :吃; :吃的对象 ?x. ?x :服用效果 ?list} => {}.


:苹果
    a :食物;
.

:仙丹  
    a :主动物品, :消耗品, :食物;
    :名称 "仙丹";
    :描述 "能够瞬间治愈任何疾病";
.

:红肚兜
    a :被动物品, :消耗品;
    :名称 "红肚兜";
    :描述 "小时候能抵挡一次死亡";
.


:玉佩
    a :被动物品;
    :名称 "玉佩";
    :描述 "有概率抵挡体质降低，每次成功抵挡有概率碎裂";
.

# :self :拥有物品 :玉佩.

:小红的棒棒糖
    a :食物;
    :稀有度 :橙;
    :描述 "使你拥有的所有的消耗品变成非消耗品";
.

:时间机器
    a :主动物品;
    :稀有度 :橙;
    :描述   "可以逆转时间，回到过去……";
.

:游戏机
    a   :主动物品;
    :稀有度 :紫;
    :描述   "打电动的时光总是非常快乐";
.


:玄铁重剑
    a   :装备;
    :稀有度 :紫;
    :描述   "传说中的神雕大侠用过的剑, 非常重";
.

:任意门
    a   :主动物品;
    :稀有度 :橙;
    :描述   "可以瞬间移动到任何地方";
.
@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#> .
@prefix diff: <http://www.w3.org/2004/delta#>.
@prefix : <http://semex.sigmanoise.com/r3/life-sim#> .


:必然事件 :super-class :事件.
{?x a :必然事件} => {?x :概率 :必然}.
{?x :概率 :必然} => {?x a :必然事件}.

# 概率分为 :不可能（0%）、:罕见（5）、:少见（20）、:有时（50）、:常见(80)、:必然（100）. 默认是有时

{?x a :事件. ?scope e:fail {?x :概率 ?y}} => {?x :概率 :有时}.

:丰收
    a :事件;
    :描述 "今年大丰收，而且你家的菜也涨价了";
    :前提 {:self :住在农村 true };
    :后果增量 {:self :家境 1};
    :概率   :有时;
.

:欠收
    a :事件;
    :描述 "今年发生了旱灾/洪水，你家颗粒无收";
    :前提 {:self :住在农村 true };
    :后果增量 {:self :家境 -1};
    :概率   :有时;
    :互斥事件 :丰收;
.


# :生成天赋 a :必然事件;
#     :描述   "生成一组天赋供玩家选择";
#     :参数   :天赋数量;
#     :前提   {:self  :可选天赋数 ?x. ?x math:greaterThan 0};
#     :后果  {
#         {} diff:replacement {}
#     }
# .



# 事件的后果可以是另一个事件？
:出生 a  :必然事件;
    :描述 "你出生了！";
    :前提 {:self :年龄 0}; 
    :后果替换 {:self :年龄 1};
    :后果分支  #后果分支是一个列表，其中的事件视为互补
        (
            [:后果替换 {:self :性别 :男}; :概率值 0.5 ]
            [:后果替换 {:self :性别 :女}; :概率值 0.5 ]
        )

.

# 这是必然事件
:过去1年 a :必然事件;
    :描述 "过去了1年";
    #:参数 :度过的年份;
    #:前提 {:self :年龄 ?x};
    :后果增量 {:self :年龄 1};
.


:得了肺炎 
    a :事件;
    :父事件 :患病;
    :前提 {:self :体质 ?x. ?x math:lessThan 3 };
    :后果增量 {:self :体质 -2};
.

[
    a :事件;
    :描述 "刚学会走路，你意外从桌子上跌落";
    :前提 {:self :年龄 2};
    :后果增量 {:self :体质 -2};
].



#{?x a :事件. :self :年龄 ?y. ?y math:lessThan 10. :self :体质 ?z. ?z math:lessThan 0} => {?x a :小时候的致死事件}.

{
    ?x a :事件;
        :后果替换 {?s ?prop ?o}.
} => {
        ?x :后果 
        {
            {?s ?prop ?v } diff:replacement {?s ?prop ?o}
        }
}.

{
    ?x a :事件;
        :后果增量 {?s ?prop ?delta}.
    ?s ?prop ?v. 
    (?v ?delta) math:sum ?v2
} => {
        ?x :后果
        {
            {?s ?prop ?v } diff:replacement {?s ?prop ?v2}
        }
}.
@prefix : <http://semex.sigmanoise.com/r3/life-sim#> .

:大智若愚   a :天赋;
    :描述 "智力减少3。此后每当你增加智力时，多增加1点";
.

:百毒不侵   a :天赋;
    :描述 "你不受食物和药品的负面作用影响";
.

:城中高楼   a :天赋;
    :名称 "城中高楼";
    :描述 "你出生在城市";
    :稀有度 0;
    :前提 {};
    :后果 {:self :住在城市 true};
.

[   a :天赋;
    :名称 "乡间微风";
    :描述 "你出生在农村";
    :稀有度 0;
    :后果 {:self :住在农村 true};
].

@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix : <http://semex.sigmanoise.com/r3/life-sim#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

:临时变量 :super-class :变量. # 临时变量的值在下一个时间步被清除。
:属性 :super-class :变量.


:年龄 a :属性;
    :取值范围  xsd:integer;
    :名称 "年龄";
.

:性别 a :属性;
    :取值范围 (:男性 :女性 :双性);
    :名称 "性别";
.

:颜值 a :属性;
    :取值范围  xsd:integer;
    :名称 "颜值";
.

:智力 a :属性;
    :取值范围  xsd:integer;
    :名称 "智力";
.

:体质 a :属性;
    :取值范围  xsd:integer;
    :名称 "体质";
.

:家境 a :属性;
    :取值范围  xsd:integer;
    :名称 "家境";
.

:快乐 a :属性;
    :取值范围  xsd:integer;
    :名称 "快乐";
.

:幸运 a :属性;
    :取值范围  xsd:integer;
    :名称 "幸运";
.
@prefix : <http://semex.sigmanoise.com/r3/life-sim#>.
@prefix diff: <http://www.w3.org/2004/delta#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .


# 随机采样
#:s :p ( :o1 :o2 :o3 :o4 :o5 :o6 ).
#  {:s :p ?l. (?l 3) :random-sample ?x. } => {:answer :is ?x}.

# {?x :distinct-count ?n} <= {?x :type :Set. ?x list:unique ?y. ?y list:length ?n }.

_:has-sampled :is false.
# 从列表list中随机采样n个对象，得到?x
{ (?list ?n) :random-sample ?sample2} <=
{    

    ?list math:memberCount ?len.
    ?n math:notGreaterThan ?len.
    (?list ?n) :random-sample-helper ?sample.
    {_:has-sampled :is false} e:becomes {:_has-sampled :is true}.
    ?sample :flatten-list ?sample2.
}.

() :flatten-list ().

{ (?head ?tail)   :flatten-list ?flatlist} <= 
{
    #"T3" log:trace  ?head .
    ?head :flatten-list ?flathead.
    #"T4" log:trace  ?flathead .
    ?tail :flatten-list ?flattail.
    (?flathead ?flattail) list:append ?flatlist.

}.
{?l :flatten-list (?l)} <= {
# "T5" log:trace ?l .
# ?l log:notEqualTo (?y).
# ?l log:notEqualTo (?y ?y2).
?l log:rawType log:Other.
#?scope e:fail {?l log:rawType rdf:List}. 
# "T6" log:trace  ?l  .
}.

#{(:o3 (:o2 (:o5 ()))) :flatten-list ?x } => {:flattedlist :Is ?x}.

(?x 0) :random-sample-helper ().

{(?list ?n) :random-sample-helper (?elem ?rest)} <= 
    {
        ?n math:greaterThan 0.
        ?list list:length ?len.
        (?len) e:random ?idx.
        ("nth1" ?idx ?list ?elem) log:pro true.
        ("delete" ?list ?elem ?newlist) log:pro true.
        (?n -1) math:sum ?n1.
        (?newlist ?n1) :random-sample-helper ?rest.
    }.





@prefix : <http://semex.sigmanoise.com/r3/life-sim#> .

{?x :super-class ?y. ?y a ?class} => { ?x a ?class}.
{?x :super-class ?y. ?u a ?x} => { ?u a ?y}.
